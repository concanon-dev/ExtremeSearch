[xsaggregateautoregression-command]
syntax = xsAggregateAutoRegression [OUTPUT filename]
shortdesc = Combines multiple Auto Regression algorithms in a weighted fashion to produce a new aggregate regression formula.
description = Aggregates (combines) auto regression algorithms that have the same x field, BY field and BY value into a new algorithm. Takes input from the output of previous xsPerform commands. The algorithms are matched by field and a weighted average (by count) is used to aggregate the results. This can be used to aggregate the results of minor periods into more major periods. An effective way to specify the input data stream is to pipe the output of inputlookup.
related = xsaggregatecorrelation xsaggregatelinearregression xsaggregatenonlinearregression xsaggregatespearmancorrelation
tags = auto linear nonlinear statistics regression 
usage = public


[xsaggregatecorrelation-command]
syntax = xsAggregateCorrelation [OUTPUT filename]
shortdesc = Combines multiple correlation algorithms in a weighted fashion to produce a new aggregate correlation formula.
description = Aggregates (combines) correlation algorithms that have the same x field, y field, BY field and BY Value into a new algorithm. Takes input from the output of previous xsPerform commands. The algorithms are matched by field and a weighted average (by count) is used to aggregate the results. This can be used to aggregate the results of minor periods into more major periods. An effective way to specify the input data stream is to pipe the output of inputlookup.
related = xsaggregateautoregression xsaggregatelinearregression xsaggregatenonlinearregression xsaggregatespearmancorrelation
tags = correlation statistics regression 
usage = public


[xsaggregatelinearregression-command]
syntax = xsAggregateLinearRegression [OUTPUT filename]
shortdesc = Combines multiple Linear Regression algorithms in a weighted fashion to produce a new aggregate regression formula.
description = Aggregates (combines) linear regression algorithms that have the same x field, y field, BY field and BY value into a new algorithm. Takes input from the output of previous xsPerform commands. The algorithms are matched by field and a weighted average (by count) is used to aggregate the results. This can be used to aggregate the results of minor periods into more major periods. An effective way to specify the input data stream is to pipe the output of inputlookup.
related = xsaggregateautoregression xsaggregatecorrelation xsaggregatenonlinearregression xsaggregatespearmancorrelation
tags = auto linear nonlinear statistics regression 
usage = public


[xsaggregatenonlinearregression-command]
syntax = xsAggregateNonLinearRegression [OUTPUT filename]
shortdesc = Combines multiple NonLinear Regression algorithms in a weighted fashion to produce a new aggregate regression formula.
description = Aggregates (combines) non-linear regression algorithms that have the same x field, y field, BY field and BY value into a new algorithm. Takes input from the output of previous xsPerform commands. The o algorithms are matched by field and a weighted average (by count) is used to aggregate the results. This can be used to aggregate the results of minor periods into more major periods. An effective way to specify the input data stream is to pipe the output of inputlookup.
related = xsaggregateautoregression xsaggregatecorrelation xsaggregatelinearregression xsaggregatespearmancorrelation
tags = auto linear nonlinear statistics regression 
usage = public


[xsaggregatespearmancorrelation-command]
syntax = xsAggregateSpearmanCorrelation [OUTPUT filename]
shortdesc = Combines multiple Spearman Correlation algorithms in a weighted fashion to produce a new aggregate Spearman Correlation formula.
description = Aggregates (combines) Spearman correlation algorithms that have the same x field, y field, BY field and BY value into a new algorithm. Takes input from the output of previous xsPerform commands. The algorithms are matched by field and a weighted average (by count) is used to aggregate the results. This can be used to aggregate the results of minor periods into more major periods. An effective way to specify the input data stream is to pipe the output of inputlookup.
 related = xsaggregateautoregression xsaggregatecorrelation xsaggregatelinearregression xsaggregatenonlinearregression
tags = correlation statistics regression
usage = public


[xsapplyautoregression-command]
syntax = xsApplyAutoRegression ((FROM filename) | (coef0=value coef1=value ceof2=value OVER (field)+))
shortdesc = Applies a formula created via xsPerformAutoRegression (or xsAggreateAutoRegression) against a stream of data.
description = Apply auto regression against a set of events containing the specified fields. The algorithm is derived from either a specified lookup file or by specifying a series of 3 coefficients and one or more fields. If the algorithm is derived from a lookup file, the fields are embedded in the file.
related = xsapplylinearregression xsapplynonlinearregression
tags = auto linear nonlinear statistics regression 
usage = public


[xsapplylinearregression-command]
syntax = xsApplyLinearRegression ((FROM file) | (coef0=value coef1=value ceof2=value OVER (field)+))
shortdesc = Applies a formula created via xsPerformLinearRegression (or xsAggregateLinearRegression) against a stream of data.
description = Apply linear regression against a set of events containing the specified fields. The algorithm is derived from either a specified lookup file or by specifying a series of 3 coefficients and one or more fields. If the algorithm is derived from a lookup file, the fields are embedded in the file.
related = xsapplyautoregression xsapplynonlinearregression
tags = auto linear nonlinear statistics regression 
usage = public


[xsapplynonlinearregression-command]
syntax = xsApplyNonLinearRegression ((FROM file) | (coef0=value coef1=value ceof2=value OVER (field)+))
shortdesc = Applies a formula created via xsPerformNonLinearRegression (or xsAggreateNonLinearRegression) against a stream of data.
description = Apply non-linear regression against a set of events containing the specified fields. The algorithm is derived from either a specified lookup file or by specifying a series of 3 coefficients and one or more fields. If the algorithm is derived from a lookup file, the fields are embedded in the file.
related = xsapplyautoregression xsapplylinearregression
tags = auto linear nonlinear statistics regression 
usage = public


[xsclonecontext-command]
syntax = xsCloneContext oldContext [in scope] to newContext [in scope]
shortdesc = Makes a full copy of a Context.
description = Makes a full copy of a Context, including all concepts.
related = xsrenamecontext
tags = context
usage = public


[xscloneconcept-command]
syntax = xsCloneConcept oldConcept FROM oldContext [IN oldScope] TO newContext [IN newScope]
shortdesc = Copies a Concept from one Context to another.
description = Copies a concept from one context to another.
related = xsrenamecontext
tags = context
usage = public


[xscreatecontext-command]
syntax = xsCreateContext name=string terms="string(,string)*" count=int [endshape=(curve|linear)] [notes=string] [scope=(private|app|global)] [shape=(pi|trapezoid|triangle|curveincrease|curvedecrease|linearincrease|lineardecrease)] (type=average_centered avg=double stdev=double | type=domain min=double max=double) [uom=string] 
shortdesc = Creates a context, which contains concepts based on a variety of methods of mapping qualitative semantics to the data. This is a Splunk 'streaming' command.
description = Creates a Context with specified parameters. The context is a 'Data Driven' context. If the type is 'average_centered', the fields avg, count, and stdev must be passed in as parameters. If the type is 'domain', the fields count, max and min must be passed in as parameters. See xsCreateUDContext for details about creating a User Defined Context instead of data from a search. 
comment1 = creates a Context called AirTime of type 'domain' containing five terms
example1 = ... | xsCreateContext name=AirTime terms="minimal,short,medium,long,extended"
comment2 = creates a Context ArrDelay of type 'average_centered' containing three terms
example2 = | xsCreateContext name=ArrDelay terms="early,ontime,late" type=average_centered avg=0.0 stdev=15
comment3 = creates a Context ArrivalDelay of type 'average_centered', containing three terms, with the avg value set to 0 and the std deviation set to 30.  The terms are shped as Triangles.  The end terms are linear.
example3 = | xsCreateContext name=ArrivalDelay terms="Early,OnTime,Late" type='average_centered' avg=0.0 stdev=30 shape=triangle endShape=linear
tags =  context
related = xsCreateUDContext, xsDisplayContext, xsFindMemebership, xsGetWhereCIX, xsUpdateContext, xsWhere
usage = public


[contextvalues-option]
syntax = [avg=double] | [count=<int>] | [max=double] | [min=double] | [stdev=double]
shortdesc = The values used to drive the Semantic Term generation
description = fgenerate needs certain values to cerate a Context.  These values may be passed into the command via arguments.  A subset, or all of the arguments may be used.
 
[conceptlist-option]
syntax = "<string>,<string>,<string>[...,<string>]"
shortdesc = An odd numbered list of Semantic Terms 
description = The Semantic Term list is an odd numbered list of context-sensitive names.  These names should represent the type of values the underlying data that will be measured by the concept.

[contexttype-option]
syntax = average_centered | domain | double | single_decline | single_growth
shortdesc = type of Context
description = There are multiple types of Contexts that can be created.  Currently, five are supported: 'average_centered' (centers the context on the average and uses std dev. to scale term sizes), 'domain' (the default, centers the set on (max-min)/2 and scales the context to cover the whole domain, 'double' (contains only 2 concepts), 'single_decline' (contains only 1 concept that declines over the domain, and 'single_growth' (contains only 1 concept that grows over the domain).


[xscreateudcontext-command]
syntax = xsCreateUDContext name=string terms="string(,string)*" count=int [endshape=(curve|linear)] [notes=string] [scope=(private|app|global)] [shape=(pi|trapezoid|triangle|curveincrease|curvedecrease|linearincrease|lineardecrease)] (type=average_centered avg=double stdev=double | type=domain min=double max=double) [uom=string] 
shortdesc = Creates a context, which contains concepts based on a variety of methods of mapping qualitative semantics to the data. This is a Splunk 'generating' command.
description = Creates a Context with specified parameters. The context is a 'User Defined' context. If the type is 'average_centered', the fields avg, count, and stdev must be passed in as parameters. If the type is 'domain', the fields count, max and min must be passed in as parameters. See xsCreateContext for details about creating a Context using data from a search instead of 'User Defined' data. 
related = xsCreateContext, xsDisplayContext, xsFindMemebership, xsGetWhereCIX, xsUpdateContext, xsWhere
tags = context


[xsdeletecontext-command]
syntax = xsDeleteContext context [IN scope]
shortdesc = Deletes a Context.
description = Deletes a Context.
related = xsDeleteConcept, xsCreateContext, xsDisplayContext xsUpdateContext, xsWhere
tags = context


[xsdeleteconcept-command]
syntax = xsDeleteConcept concept FROM context [IN scope]
shortdesc = Deletes a Concept from a Context.
description = Deletes a Concept from a Context.
related = xsDeleteContext, xsCreateContext, xsDisplayContext xsUpdateContext, xsWhere
tags = context


[xsdiscovertrend-command]
syntax = xsDiscoverTrend (y_field [IN Context])+ [OVER (x_field)+] [BY field]
shortdesc = Takes the lowest and highest x value, applies linear regression to these values, and maps the results to the concept represented by the Y field.
description = Discover any trend of y_field(s) over x_field(s) using linear regression. The trend is determined across the context associated with the field. This context of the y_field is a prerequisite for the command to run. Trend is calculated as follows: Take the lowest X value and calculate the Y value, take the the highest X value and calcuate the Y value. For each concept in the Y Context, calculate the CIX for the low and high Y. The trend for each concept is (hi_Y_CIX - low_Y_CIX) / numRows. For each concept, the following columns are written: x,y,bf,bv,concept,trend.
related = xsCreateContext xsPerformLinearRegression
tags = predict context trend


[xsdisplayconcept-command]
syntax = xsDisplayConcept [hedge]* concept FROM context [IN scope] [; [hedge]* concept FROM context [IN scope] ]* [USING synonyms]
shortdesc = Displays one or more concepts (with hedges).
description =  Displays one or more concept (with hedges) as an area chart. This command is a "generating" command, which means it must be run as the first command.
tags = set context
related = xsCreateContext, xsDisplayContext, xsFindMemebership, xsGetWhereCIX, xsUpdateContext, xsWhere
usage = public

[xsdisplaycontext-command]
syntax = xsDisplayContext context
shortdesc = Displays all of the concepts in a context.
description = Displays a Context as an area chart. This command is a "generating" command, which means it must be run as the first command.
tags = context concept
related = xsCreateContext, xsFindMemebership, xsGetWhereCIX, xsUpdateContext, xsWhere
usage = public


[xsdisplaywhere-command]
syntax = xsDisplayWhere xswhere-option (xswhere-andor-option xswhere-option)*
shortdesc = Displays the (hedged) concepts used by xsWhere.
description = Display the Term Sets generated by a xsWhere query. 
tags = conceptual search
related = xsWhere
usage = public


[xsfindbestconcept-command]
syntax = xsFindBestConcept field [IN context [IN scope]]
shortdesc = Returns the name of the concept that best fits (highest compatability) the field, as well as the associated compatibility index (CIX). 
description = For each event, lookup the value of a field and return the most relevant (highest compatible) concept in a context as well as the compatibility index (CIX). The field "BestConcept" will contain the concept. The field "BestCIX" will contain the associated compatibility index. 
tags = context
related = xsCreateContext, xsDisplayContext, xsGetWhereCIX, xsDisplaySemanticTerm, xsWhere
usage = public


[xsfindmembership-command]
syntax = xsFindMembership field [IN context [IN scope]]
shortdesc = Returns the membership value of a data value in each concept in a specified context, or returns the data value given a membership value in a specified context.
description = For each event, lookup the value of a field and return the membership values of each concept. A column will be added to the event stream for each concept in the context.
tags = context
related = xsCreateContext, xsDisplayContext, xsGetWhereCIX, xsUpdateContext, xsWhere
usage = public


[xsgetdistance-command]
syntax = xsGetDistance [FROM] (zipcode | lat lon | city region [country]) TO (zipcode | lat lon | city region [country])
shortdesc = Determine the distance (in miles) between two locations.
description = Determine the distance (in miles) between two locations.
tags = context
related = 


[xsgetwherecix-command]
syntax = xsGetWhereCIX [cixname=string] [cixtype=avg|weighted] xsWhere-option (xsWhere-andor-option xsWhere-option)*
shortdesc = Generates the compatibility index (cix) of a conceptual query.
description = Determine the compatibility of each event with a semantic query. Each event is written to the output stream with the compatibility value (xcix) added as a field named by cixname. The default is "WhereCIX". The xcix is generated using one of two functions, avg or weighted. The avg function sums the membership values of eah query and divides by the count. The weighted function is similar to a weighted average. The xcix is calculated by putting a higher value on memberhip in concepts that are closer to the beginning of the query, and then divides by the weighted count. Since the xcix is added to each event, other commands can then be applied to generate more intelligent information.
comment1 = adds a column "WhereCIX" containing the compatibility index for each event in the semantic query "AirTime is minimal or AirTime is short"
example1 = ... | xsGetWhereCIX AirTime is minimal or AirTime is short
comment2 = adds a column "WhereCIX" containing the compatibility index for each event in the semantic query "AirTime is minimal or AirTime is short" using the weighted avg function
example2 = ... | xsGetWhereCIX cixtype=weighted AirTime is minimal or AirTime is short
tags = context concept
related = xsCreateContext, xsGetWhereCIX, xsUpdateContext, xsWhere
usage = public


[xslicense-command]
syntax = xslicense [[reactivate] keystring]
shortdesc = Installs, updates and activates a product license key.
description = Licenses and activates Extreme Search software. Displays licensing status.
comment1 = Apply and activate a new Extreme Search for Splunk license key.
example1 = | xslicense SXZH-JGIZ-XZXB-294Y-1459-841S-MCTA
comment2 = Display Extreme Search for Splunk license status.
example2 = | xslicense
comment3 = Reactivate with a new license key.
example3 = | xslicense reactivate JINX-SQEP-8B5T-BJNV-JVRV-A6TA-NQXG
tags = system license activation 
usage = public


[xslistcontexts-command]
syntax = xsListContexts [scope]
shortdesc = List the contexts in private, app or global.
description = List the contexts in a scope (private, app or global)
tags = context
related = xsCreateContext, xsDeleteContext
usage = public


[xslistconcepts-command]
syntax = xsListConcepts FROM context [IN scope]
shortdesc = List the concepts from a context in private, app or global.
description = List the concepts from a context in a scope (private, app or global).
tags = context
related = xsCreateContext, xsDeleteContext
usage = public


[xslistuom-command]
syntax = xsListUOM FROM context [IN scope]
shortdesc = List the Unit of Measurement (UOM) from a context in private, app or global.
description = List the Unit of Measurement (UOM) from a context in a scope (private, app or global)
tags = context
related = xsCreateContext, xsDeleteContext
usage = public


[xsoverlaycontext-command]
syntax = xsOverlayContext key=field count=field context
shortdesc = Overlays multiple contexts on a chart or in a table
description = Overlays multiple contexts on a chart or in a table
tags = context
related = xsCreateContext, xsDeleteContext
usage = public


[xsperformautoregression-command]
syntax = xsPerformAutoRegression (x_field)+ [BY field] [USING (maxentropy | leastsquares)] [OUTPUT filename] 
shortdesc = Performs linear (least squares) and polynomial (max entropy) regression for a set of data streams. For linear regression, the function y=coef1*x+coef2 is generated for each stream. For polynomial, a three coefficient function, y= coef0*x^2+coef1*x+coef2, is generated for each stream.
description = Performs an auto regression using the following formula: y= ceof0*x*x + coef1*x + coef2 and sends the output to a specified file.
tags = auto linear nonlinear statistics regression 
related = xsperformautoregression xsperformcorrelation xsperformnonlinearregression xsperformspearmancorrelation
usage = public


[xsperformcorrelation-command]
syntax = xsPerformCorrelation (x_field)+ [WITH (y_field)+] [BY field]
shortdesc = Performs correlation of a data stream or compatibility index stream.
description = Performs correlation of fields.
tags = correlation statistics regression 
related = xsperformautoregression xsperformlinearregression xsperformnonlinearregression xsperformspearmancorrelation
usage = public


[xsperformlinearregression-command]
syntax = xsPerformLinearRegression (x_field)+ OVER (y_field)+ [BY field] [OUTPUT filename] 
shortdesc = Performs linear regression of data streams (x) over other data streams(y). For each pair of data streams, the following function is generated: y=slope*x+intercept
description = Performs a non linear regression using the following formula: y= slope * x + intercept and sends the output to a specified file.
tags = auto linear nonlinear statistics regression 
related = xsperformautoregression xsperformcorrelation xsperformnonlinearregression xsperformspearmancorrelation
usage = public


[xsperformnonlinearregression-command]
syntax = xsPerformNonLinearRegression (x_field)+ OVER (y_field)+ [BY field] [OUTPUT filename] 
shortdesc = Performs quadratic (non-linear) regression of data streams (x) over other data streams (y). For each pair of data streams, the following function is generated: y=coef0*x^2+coef1*x+coef2.
description = Performs a non linear regression using the following formula: y= ceof0*x*x + coef1*x + coef2 and sends the output to a specified file.
tags = auto linear nonlinear statistics regression 
related = xsperformautoregression xsperformcorrelation xsperformnonlinearregression xsperformspearmancorrelation
usage = public


[xsperformspearmancorrelation-command]
syntax = xsPerformSpearmanCorrelation (field)+ [WITH (field)+] [BY field]
shortdesc = Performs Spearman correlation of a data stream or compatibility index stream.
description = Perform spearman correlation of a data stream.  Pearson's r correlation is used to correlate a set of data points.  
tags = correlation statistics regression 
related = xsperformautoregression xsperformcorrelation xsperformlinearregression xsperformnonlinearregression
usage = public


[xspredict-command]
syntax = xpredict (y_field)+ WHEN x_field IS value
shortdesc = Predicts the future values of a time-series data stream.
description = Predict the values, using linear regression, of a set of fields when a field is a certain value
tags = context concept
related = xcix, xclassify, xcorrelate, xdefine, xdisplay, xgenerate, xlookup, xplot, xpredict, xregress, xwhere
usage = public


[xsrenamecontext-command]
syntax = xsRenameContext oldContext [IN scope] to newContext [IN scope]
shortdesc = Renames a context.
description = Renames a context.
tags = context concept


[xswhere-command]
syntax = xswhere [alfacut=value] [cixname=<string>] [cixtype=avg|weighted] [synonyms=filename] <xswhere-option> (<xswhere-andor-option> <xswhere-option>)*
shortdesc = Selects a collection of rows from the data space based on the application of qualitative semantics (which are created by xsCreateContext).
description = Determine which events are compatible with a semantic query. An event is compatible with the query if the compatibility index (xcix) is greater than the alfacut. The default alfacut is 0.2. If an event meets this condition, it is written to the output stream with the value of the xcix added as a field named by cixname. The default is "WhereCIX". If not, the event is disposed. The xcix is generated using one of two functions, avg or weighted. The avg function sums the membership values of eah query and divides by the count. The weighted function is similar to a weighted average. The xcix is calculated by putting a higher value on memberhip in terms that are closer to the beginning of the query, and then divides by the weighted count. Since the xcix is added to each event that meets the alfacut, other commands can then be applied to generate more intelligent information.
comment1 = returns all of the events where "AirTime is minimal or AirTime is short"
example1 = ... | xswhere AirTime is minimal or AirTime is short
comment2 = returns all of the events where "AirTime is minimal or AirTime is short" using the weighted avg function
example2 = ... | xswhere cixtype=weighted AirTime is minimal or AirTime is short
tags = context concept
related = xsCreateContext, xsDisplayContext, xsFindMemebership, xsGetWhereCIX, xsUpdateContext
usage = public

[xswhere-option]
syntax = field [IN context] IS (<xswhere-modifier-option>)* concept
shortdesc = clause that determines if a field value is member of a Semantic Term.
description = The membership value of a field for a specific concept in a context is returned. If 'context' is specified, the Semantic Term in that Context is used.  Otherwise, the context matching the field name is used.  Semantic modifiers, if any, are applied to the concept before the memebership value is returned.

[xswhere-modifier-option]
syntax = [ about | above | after | before | below | close | extremely | generally | not | positive | slightly | somewhat | very | vicinity ]*
shortdesc = modify the concept
description = These modifiers are used to change the dynamics of a concept.

[xswhere-andor-option]
syntax = AND | OR
shortdesc = Boolean expressions
description = Use these boolean expressions to build a larger query

